package se.wgco.jgf.adventura_ultima.gui_components;

import se.wgco.jgf.adventura_ultima.character_classes.PlayerCharacter;
import se.wgco.jgf.adventura_ultima.character_classes.concrete_classes.Thief;
import se.wgco.jgf.adventura_ultima.city.City;
import se.wgco.jgf.adventura_ultima.city.CitySize;
import se.wgco.jgf.adventura_ultima.city_elements.CityElement;
import se.wgco.jgf.adventura_ultima.constants.GameWindowConstants;
import se.wgco.jgf.adventura_ultima.constants.WorldConstants;
import se.wgco.jgf.adventura_ultima.graphics_maps.EnumColorMap;
import se.wgco.jgf.adventura_ultima.graphics_maps.EnumImageMap;
import se.wgco.jgf.adventura_ultima.graphics_maps.EnumShapeDataMap;
import se.wgco.jgf.adventura_ultima.graphics_maps.EnumTextMap;
import se.wgco.jgf.adventura_ultima.listeners.CharacterKeyListener;
import se.wgco.jgf.adventura_ultima.navigation.WorldCoordinate;
import se.wgco.jgf.adventura_ultima.play_field.TileBlock;
import se.wgco.jgf.adventura_ultima.play_field.WorldMap;
import se.wgco.jgf.adventura_ultima.tiles.TerrainTile;
import se.wgco.jgf.adventura_ultima.tiles.terrain_feature.TerrainFeatureType;

import javax.swing.*;
import java.awt.*;
import java.util.AbstractMap;

/**
 * Created by Josef on 29/04/2014.
 * <p>
 * Creates a the main menu.
 * </p>
 */
public class MainMenu extends JFrame {
    private static final int CHARACTER_START_X = WorldConstants.STANDARD_X_START_TILE;
    private static final int CHARACTER_START_Y = WorldConstants.STANDARD_Y_START_TILE;

    private static WorldMap world = null;
    private static AbstractMap<WorldCoordinate, TileBlock> worldMap = null;
    private static PlayerCharacter character = null;
    private static City capitalCity;

    public static void main(String[] args) {
        initGame();
        initCity();
        //printWorldTestData();
        printCityTestData();

        new MainMenu();
    }

    private static void printWorldTestData() {
        System.out.println("Initial number of tile blocks: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(0, -1));
        System.out.println("Tile blocks after moving one block up: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(0, 1));
        System.out.println("Tile blocks after moving one block down: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(-1, 0));
        System.out.println("Tile blocks after moving one block left: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(1, 0));
        System.out.println("Tile blocks after moving one block right: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(1, 1));
        System.out.println("Tile blocks after moving one block right and one block down: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(1, -1));
        System.out.println("Tile blocks after moving one block right and one block up: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(-1, 1));
        System.out.println("Tile blocks after moving one block left and one block down: " + worldMap.size());

        world.switchToTileBlock(world.getTileBlockAt(-1, -1));
        System.out.println("Tile blocks after moving one block left and one block up: " + worldMap.size());

        // Prints a text representation of the 25 tile blocks generated by the above movements
        for (int y = -2; y <= 2; y++) {
            TileBlock block0 = world.getTileBlockAt(-2, y);
            TileBlock block1 = world.getTileBlockAt(-1, y);
            TileBlock block2 = world.getTileBlockAt(0, y);
            TileBlock block3 = world.getTileBlockAt(1, y);
            TileBlock block4 = world.getTileBlockAt(2, y);

            TerrainTile[][] terrainTiles0 = block0.getTerrainTiles();
            TerrainTile[][] terrainTiles1 = block1.getTerrainTiles();
            TerrainTile[][] terrainTiles2 = block2.getTerrainTiles();
            TerrainTile[][] terrainTiles3 = block3.getTerrainTiles();
            TerrainTile[][] terrainTiles4 = block4.getTerrainTiles();

            for (int y1 = 0; y1 < terrainTiles0[0].length; y1++) {

                for (TerrainTile[] terrainTile0 : terrainTiles0) {
                    System.out.print(EnumTextMap.terrainTileMap.get(terrainTile0[y1].getTileType()));
                    System.out.print(" ");
                }

                System.out.print("  ");

                for (TerrainTile[] terrainTile1 : terrainTiles1) {
                    System.out.print(EnumTextMap.terrainTileMap.get(terrainTile1[y1].getTileType()));
                    System.out.print(" ");
                }

                System.out.print("  ");

                for (TerrainTile[] terrainTile2 : terrainTiles2) {
                    System.out.print(EnumTextMap.terrainTileMap.get(terrainTile2[y1].getTileType()));
                    System.out.print(" ");
                }

                System.out.print("  ");

                for (TerrainTile[] terrainTile3 : terrainTiles3) {
                    System.out.print(EnumTextMap.terrainTileMap.get(terrainTile3[y1].getTileType()));
                    System.out.print(" ");
                }

                System.out.print("  ");

                for (TerrainTile[] terrainTile4 : terrainTiles4) {
                    System.out.print(EnumTextMap.terrainTileMap.get(terrainTile4[y1].getTileType()));
                    System.out.print(" ");
                }
                System.out.print("\n");
            }
            System.out.print("\n");
        }
    }

    private static void printCityTestData() {
        CityElement[][] cityMap = capitalCity.getCityMap();
        for (int x = 0; x < capitalCity.getMapWidth(); x++) {
            for (int y = 0; y < capitalCity.getMapHeight(); y++) {
                String cityElementSymbol = EnumTextMap.cityElementMap.get(cityMap[x][y].getCityElementType());
                System.out.print(" " + cityElementSymbol + " ");
            }
            System.out.println();
        }
    }

    private static void initGame() {
        initGraphicsMaps();
        world = new WorldMap();
        worldMap = world.getWorldMap();
        character = new PlayerCharacter(CHARACTER_START_X, CHARACTER_START_Y, new Thief());
    }

    private static void initCity() {
        capitalCity = new City("Capital City", CitySize.SMALL);
    }

    private static void initGraphicsMaps() {
        new EnumColorMap().initMaps();
        new EnumImageMap().initMaps();
        new EnumTextMap().initMaps();
        new EnumShapeDataMap().initMaps();
    }

    // TODO: Move the painting of the play field to a separate class
    // TODO: Make this constructor create the main menu
    public MainMenu() {
        super("Adventura Ultima");

        // Creates JComponents
        JLayeredPane mainContentPane = new JLayeredPane();
        BackgroundComponent backgroundComponent = new BackgroundComponent();
        StatusBarComponent statusBarComponent = new StatusBarComponent();
        PlayFieldComponent playFieldComponent = new PlayFieldComponent(world, character);
        CityViewComponent cityViewComponent = new CityViewComponent(capitalCity);

        // Adds listeners
        this.addKeyListener(new CharacterKeyListener(playFieldComponent, character, world));

        this.setLayout(new BorderLayout());
        this.setResizable(false);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.add(mainContentPane, BorderLayout.CENTER);

        mainContentPane.setPreferredSize(new Dimension(GameWindowConstants.WINDOW_WIDTH, GameWindowConstants.WINDOW_HEIGHT));

        backgroundComponent.setBounds(0, 0, GameWindowConstants.WINDOW_WIDTH, GameWindowConstants.WINDOW_HEIGHT);
        statusBarComponent.setBounds(GameWindowConstants.STATUS_BAR_X, GameWindowConstants.STATUS_BAR_Y, GameWindowConstants.STATUS_BAR_WIDTH, GameWindowConstants.STATUS_BAR_HEIGHT);
        playFieldComponent.setBounds(GameWindowConstants.PLAY_FIELD_X, GameWindowConstants.PLAY_FIELD_Y, GameWindowConstants.PLAY_FIELD_WIDTH, GameWindowConstants.PLAY_FIELD_HEIGHT);
        cityViewComponent.setBounds(GameWindowConstants.PLAY_FIELD_X, GameWindowConstants.PLAY_FIELD_Y, GameWindowConstants.PLAY_FIELD_WIDTH, GameWindowConstants.PLAY_FIELD_HEIGHT);

        backgroundComponent.setOpaque(true);
        statusBarComponent.setOpaque(true);
        playFieldComponent.setOpaque(true);
        backgroundComponent.setOpaque(true);

        mainContentPane.add(backgroundComponent, 0, 0);
        mainContentPane.add(statusBarComponent, 1, 0);
        //mainContentPane.add(playFieldComponent, 1, 0);
        mainContentPane.add(cityViewComponent, 1, 0);

        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
}
